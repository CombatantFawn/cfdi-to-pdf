import { type CNodeInterface, type CNodes } from '@nodecfdi/cfdiutils-common';
import {
  type Column,
  type Content,
  type ContentColumns,
  type ContentTable,
  type Style,
  type TableCell,
  type TDocumentDefinitions,
} from 'pdfmake/interfaces';
import { type CatalogsInterface } from '../catalogs/catalogs-interface.js';
import { type CfdiData } from '../cfdi_data.js';
import { breakEveryNCharacters } from '../utils/break_characters.js';
import { formatCurrency, toCurrency, toNumber } from '../utils/currency.js';
import { useImpLocal10Complement } from './complements/imp-local10-complement.js';
import { usePago10Complement } from './complements/pago10-complement.js';
import { usePago20Complement } from './complements/pago20-complement.js';
import { type DocumentTranslatorInterface } from './document-translator-interface.js';

export class GenericCfdiTranslator implements DocumentTranslatorInterface<CfdiData> {
  protected generateGeneralInvoiceInfoContent(
    comprobante: CNodeInterface,
    catalogs: CatalogsInterface,
  ): Content {
    return {
      style: 'tableContent',
      table: {
        widths: [95, '*', 95, '*'],
        body: [
          [
            {
              text: 'DATOS GENERALES DEL COMPROBANTE',
              style: 'tableHeader',
              colSpan: 4,
              alignment: 'left',
            },
            {},
            {},
            {},
          ],
          [
            'MONEDA:',
            comprobante.get('Moneda'),
            'FORMA PAGO:',
            catalogs.catFormaPago(comprobante.get('FormaPago')),
          ],
          [
            'METODO DE PAGO:',
            catalogs.catMetodoPago(comprobante.get('MetodoPago')),
            'CONDICIONES DE PAGO:',
            comprobante.get('CondicionesDePago'),
          ],
        ],
      },
      layout: 'lightHorizontalLines',
    };
  }



  protected generateCurrencyRelatedInfo(
    comprobante: CNodeInterface,
    catalogs: CatalogsInterface,
  ): Content {
    const totalImpuestosTrasladados = comprobante.searchAttribute(
      'cfdi:Impuestos',
      'TotalImpuestosTrasladados',
    );
    const totalImpuestosRetenidos = comprobante.searchAttribute(
      'cfdi:Impuestos',
      'TotalImpuestosRetenidos',
    );
    const contentColumns: Column[] = [];
    const relatedInfoAndImport: Column[] = [];
    if (comprobante.get('TipoDeComprobante') !== 'P') {
      relatedInfoAndImport.push({
        fontSize: 7,
        margin: [0, 5, 0, 0],
        columns: [
          { width: 'auto', text: 'IMPORTE CON LETRA:', margin: [0, 0, 5, 0] },
          {
            width: 'auto',
            text: toCurrency(
              Number.parseFloat(comprobante.get('Total') || '0'),
              comprobante.get('Moneda'),
            ),
          },
          { width: '*', text: '' },
        ],
      });
    }

    if (comprobante.get('Version') === '3.3') {
      const relacionados = comprobante.searchNode('cfdi:CfdiRelacionados');
      if (relacionados) {
        const uuidsArray = relacionados.searchNodes('cfdi:CfdiRelacionado').map((relacionado) => {
          return [`UUID: ${relacionado.get('UUID')}`];
        });

        relatedInfoAndImport.push({
          fontSize: 7,
          margin: [0, 5, 0, 0],
          table: {
            widths: ['*'],
            body: [
              [
                {
                  text: `CFDIS RELACIONADOS - TIPO RELACIÓN ${catalogs.catTipoRelacion(
                    relacionados.get('TipoRelacion'),
                  )}`,
                  fillColor: '#CCCCCC',
                },
              ],
              ...uuidsArray,
            ],
          },
        });
      }
    } else {
      const relacionados = comprobante.searchNodes('cfdi:CfdiRelacionados');
      if (relacionados.length > 0) {
        for (const relacionadosNode of relacionados) {
          const uuidsArray = relacionadosNode
            .searchNodes('cfdi:CfdiRelacionado')
            .map((relacionado) => {
              return [`UUID: ${relacionado.get('UUID')}`];
            });

          relatedInfoAndImport.push({
            fontSize: 7,
            margin: [0, 5, 0, 0],
            table: {
              widths: ['*'],
              body: [
                [
                  {
                    text: `CFDIS RELACIONADOS - TIPO RELACIÓN ${catalogs.catTipoRelacion(
                      relacionadosNode.get('TipoRelacion'),
                    )}`,
                    fillColor: '#CCCCCC',
                  },
                ],
                ...uuidsArray,
              ],
            },
          });
        }
      }
    }

    contentColumns.push(relatedInfoAndImport);
    if (comprobante.get('TipoDeComprobante') !== 'P') {
      contentColumns.push({
        width: 'auto',
        alignment: 'right',
        style: 'tableContent',
        margin: [10, 0, 0, 0],
        table: {
          widths: ['auto', 'auto'],
          body: [
            ['SUBTOTAL:', { text: formatCurrency(comprobante.get('SubTotal')), fontSize: 9 }],
            ['DESCUENTO:', formatCurrency(comprobante.get('Descuento'))],
            ['TOTAL IMP. TRASLADADOS:', formatCurrency(totalImpuestosTrasladados)],
            ['TOTAL IMP. RETENIDOS:', formatCurrency(totalImpuestosRetenidos)],
            [
              {
                text: 'TOTAL:',
                fontSize: 11,
                bold: true,
              },
              { text: formatCurrency(comprobante.get('Total')), fontSize: 11, bold: true },
            ],
          ],
        },
        layout: 'lightHorizontalLines',
      });
    }

    return {
      columns: contentColumns,
    };
  }



  protected generateContent(cfdiData: CfdiData, catalogs: CatalogsInterface): Content {
    const comprobante = cfdiData.comprobante();
    const emisor = cfdiData.emisor();
    const receptor = cfdiData.receptor();
    const conceptos = comprobante.searchNodes('cfdi:Conceptos', 'cfdi:Concepto');
    const additionalFields = cfdiData.additionalFields();

    const content: Content[] = [];
    content.push(
      this.generateTopContent(comprobante, catalogs, cfdiData.logo()),
      '\n',
      this.generateEmisorContent(emisor, catalogs),
      '\n',
      this.generateReceptorContent(receptor, catalogs, cfdiData.address()),
      '\n',
    );
    if (comprobante.get('TipoDeComprobante') !== 'P') {
      this.useGlobalInformation(comprobante, content, catalogs);
      content.push(this.generateGeneralInvoiceInfoContent(comprobante, catalogs), '\n');
    }

    content.push(
      this.generateConceptsContent(conceptos, catalogs),
      '\n',
      this.generateCurrencyRelatedInfo(comprobante, catalogs),
      '\n',
    );

    /** Area of complements */
    usePago10Complement(comprobante, content);
    usePago20Complement(comprobante, content);
    useImpLocal10Complement(comprobante, content);
    /** **/

    if (additionalFields) {
      for (const element of additionalFields) {
        content.push(
          {
            style: 'tableContent',
            table: {
              widths: ['*'],
              body: [[{ text: element.title, style: 'tableHeader' }], [element.value]],
            },
            layout: 'lightHorizontalLines',
          },
          '\n',
        );
      }
    }

    content.push(this.generateStampContent(cfdiData));

    return content;
  }
}
